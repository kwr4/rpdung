{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPCV2fKj/E2LfF7Z7VwkbR4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kwr4/rpdung/blob/main/dungrpg3.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qmfcC5VuCJa5",
        "outputId": "97612c16-cfce-43a7-feb0-ce6e2dfc0e8c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting python-telegram-bot\n",
            "  Downloading python_telegram_bot-21.9-py3-none-any.whl.metadata (17 kB)\n",
            "Requirement already satisfied: httpx~=0.27 in /usr/local/lib/python3.10/dist-packages (from python-telegram-bot) (0.28.1)\n",
            "Requirement already satisfied: anyio in /usr/local/lib/python3.10/dist-packages (from httpx~=0.27->python-telegram-bot) (3.7.1)\n",
            "Requirement already satisfied: certifi in /usr/local/lib/python3.10/dist-packages (from httpx~=0.27->python-telegram-bot) (2024.12.14)\n",
            "Requirement already satisfied: httpcore==1.* in /usr/local/lib/python3.10/dist-packages (from httpx~=0.27->python-telegram-bot) (1.0.7)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.10/dist-packages (from httpx~=0.27->python-telegram-bot) (3.10)\n",
            "Requirement already satisfied: h11<0.15,>=0.13 in /usr/local/lib/python3.10/dist-packages (from httpcore==1.*->httpx~=0.27->python-telegram-bot) (0.14.0)\n",
            "Requirement already satisfied: sniffio>=1.1 in /usr/local/lib/python3.10/dist-packages (from anyio->httpx~=0.27->python-telegram-bot) (1.3.1)\n",
            "Requirement already satisfied: exceptiongroup in /usr/local/lib/python3.10/dist-packages (from anyio->httpx~=0.27->python-telegram-bot) (1.2.2)\n",
            "Downloading python_telegram_bot-21.9-py3-none-any.whl (662 kB)\n",
            "\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/662.7 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m662.7/662.7 kB\u001b[0m \u001b[31m26.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hInstalling collected packages: python-telegram-bot\n",
            "Successfully installed python-telegram-bot-21.9\n"
          ]
        }
      ],
      "source": [
        "pip install python-telegram-bot"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "\n",
        "import random\n",
        "import time\n",
        "from telegram import Update\n",
        "from telegram.ext import Application, CommandHandler, CallbackContext\n",
        "import asyncio\n",
        "import nest_asyncio\n",
        "\n",
        "# Monster names list\n",
        "MONSTER_NAMES = [\n",
        "    \"Goblin\", \"Vampire\", \"Werewolf\", \"Troll\", \"Skeleton\", \"Zombie\", \"Dragon\", \"Ogre\", \"Griffin\",\n",
        "    \"Chimera\", \"Minotaur\", \"Witch\", \"Giant\", \"Banshee\", \"Mummy\", \"Hydra\", \"Imp\", \"Ghost\", \"Kraken\",\n",
        "    \"Golem\", \"Lich\", \"Cyborg\", \"Harpy\", \"Manticore\", \"Basilisk\", \"Demon\", \"Wraith\", \"Succubus\", \"Gargoyle\"\n",
        "]\n",
        "\n",
        "# Class-specific monster weaknesses\n",
        "class_weaknesses = {\n",
        "    \"Warrior\": [\"Troll\", \"Minotaur\", \"Giant\"],\n",
        "    \"Priest\": [\"Skeleton\", \"Vampire\", \"Zombie\"],\n",
        "    \"Sorceress\": [\"Manticore\", \"Basilisk\", \"Demon\"]\n",
        "}\n",
        "\n",
        "# Game classes (Player, Monster, FinalBoss)\n",
        "class Player:\n",
        "    def __init__(self, name, class_type):\n",
        "        self.name = name\n",
        "        self.class_type = class_type\n",
        "        self.level = 1\n",
        "        self.hp = 100\n",
        "        self.ap = 10\n",
        "        self.experience = 0\n",
        "        self.spell = self.choose_spell()\n",
        "\n",
        "    def choose_spell(self):\n",
        "        if self.class_type == \"Warrior\":\n",
        "            return self.slash\n",
        "        elif self.class_type == \"Priest\":\n",
        "            return self.holy_radiance\n",
        "        elif self.class_type == \"Sorceress\":\n",
        "            return self.fireball\n",
        "\n",
        "    async def activate_passive(self, update):\n",
        "        chance = random.random()\n",
        "        if chance < 0.2:  # 20% chance to activate passive ability\n",
        "            if self.class_type == \"Warrior\":\n",
        "                await self.increase_defense(update)\n",
        "            elif self.class_type == \"Priest\":\n",
        "                await self.self_heal(update)\n",
        "            elif self.class_type == \"Sorceress\":\n",
        "                await self.vampiric_bite(update)\n",
        "\n",
        "    async def increase_defense(self, update):\n",
        "        self.hp += 20\n",
        "        await update.message.reply_text(f\"{self.name}'s **passive ability** activates! Defense increased by 20 HP. 🛡️\")\n",
        "\n",
        "    async def self_heal(self, update):\n",
        "        heal_amount = random.randint(15, 22)\n",
        "        self.hp += heal_amount\n",
        "        await update.message.reply_text(f\"{self.name}'s **passive ability** activates! Healed for {heal_amount} HP. ❤️\")\n",
        "\n",
        "    async def vampiric_bite(self, update):\n",
        "        damage = random.randint(15, 25)\n",
        "        heal = damage // 2\n",
        "        self.hp += heal\n",
        "        await update.message.reply_text(f\"{self.name}'s **passive ability** activates! Vampiric Bite heals for {heal} HP after dealing {damage} damage. 🩸\")\n",
        "\n",
        "    async def slash(self, monster, update):\n",
        "        await self.activate_passive(update)\n",
        "        damage = random.randint(10, 20)\n",
        "        if monster.name in class_weaknesses[self.class_type]:\n",
        "            damage *= 1.15\n",
        "        monster.hp -= damage\n",
        "        return f\"{self.name} slashes at {monster.name} for {damage} damage! ⚔️\"\n",
        "\n",
        "    async def holy_radiance(self, monster, update):\n",
        "        await self.activate_passive(update)\n",
        "        damage = random.randint(15, 25)\n",
        "        if monster.name in class_weaknesses[self.class_type]:\n",
        "            damage *= 1.15\n",
        "        monster.hp -= damage\n",
        "        return f\"{self.name} casts Holy Radiance on {monster.name} for {damage} damage! ✨\"\n",
        "\n",
        "    async def fireball(self, monster, update):\n",
        "        await self.activate_passive(update)\n",
        "        damage = random.randint(20, 30)\n",
        "        if monster.name in class_weaknesses[self.class_type]:\n",
        "            damage *= 1.15\n",
        "        monster.hp -= damage\n",
        "        return f\"{self.name} casts Fireball at {monster.name} for {damage} damage! 🔥\"\n",
        "\n",
        "    def level_up(self):\n",
        "        self.level += 1\n",
        "        self.hp += 20\n",
        "        self.ap += 5\n",
        "        self.experience = 0\n",
        "\n",
        "class Monster:\n",
        "    def __init__(self, level):\n",
        "        self.name = random.choice(MONSTER_NAMES)\n",
        "        self.level = level\n",
        "        self.hp = 50 + (level * 20)\n",
        "        self.ap = 5 + (level * 2)\n",
        "\n",
        "    def attack(self, player):\n",
        "        damage = random.randint(5, self.ap)\n",
        "        player.hp -= damage\n",
        "        return f\"{self.name} attacks {player.name} for {damage} damage!\"\n",
        "\n",
        "class FinalBoss(Monster):\n",
        "    def __init__(self):\n",
        "        super().__init__(6)\n",
        "        self.name = \"?????\"\n",
        "        self.hp = 115\n",
        "        self.ap = 30\n",
        "\n",
        "    def attack(self, player):\n",
        "        damage = random.randint(20, self.ap)\n",
        "        player.hp -= damage\n",
        "        return f\"{self.name} unleashes a devastating blow on {player.name} for {damage} damage! 💥\"\n",
        "\n",
        "# Bot functions\n",
        "class Game:\n",
        "    def __init__(self):\n",
        "        self.players = {}\n",
        "        self.scores = {}\n",
        "\n",
        "    async def start_game(self, update: Update, context: CallbackContext):\n",
        "        await update.message.reply_text(\n",
        "            \"Welcome to the DungeonRpg! Type /newgame <class> to start a new adventure. \"\n",
        "            \"(Example: /newgame Sorceress) Classes include Warrior, Priest, & Sorceress. \"\n",
        "            \"Each has a unique passive ability. 🏰\"\n",
        "        )\n",
        "\n",
        "    async def new_game(self, update: Update, context: CallbackContext):\n",
        "        try:\n",
        "            name = update.message.from_user.first_name\n",
        "            class_choice = context.args[0].capitalize()\n",
        "            if class_choice not in [\"Warrior\", \"Priest\", \"Sorceress\"]:\n",
        "                await update.message.reply_text(\"Invalid class! Choose Warrior, Priest, or Sorceress.\")\n",
        "                return\n",
        "\n",
        "            player = Player(name, class_choice)\n",
        "            self.players[update.message.chat_id] = player\n",
        "            await update.message.reply_text(f\"Welcome, {player.name}! You are a {player.class_type}. Let the adventure begin! 🗡️\")\n",
        "            await self.dungeon_level(update, context, player, 1)\n",
        "        except IndexError:\n",
        "            await update.message.reply_text(\"Please specify a class! Example: /newgame Warrior\")\n",
        "\n",
        "    async def dungeon_level(self, update: Update, context: CallbackContext, player: Player, current_level: int):\n",
        "        if current_level == 4:\n",
        "            await self.final_boss_battle(update, context, player)\n",
        "            return\n",
        "\n",
        "        await update.message.reply_text(f\"\\n🏰 Entering Dungeon Level {current_level}... 🗡️\\n\")\n",
        "        monster = Monster(current_level)\n",
        "        await self.battle(update, context, player, monster, current_level)\n",
        "\n",
        "    async def battle(self, update: Update, context: CallbackContext, player: Player, monster: Monster, current_level: int):\n",
        "        while player.hp > 0 and monster.hp > 0:\n",
        "            player_action = await player.spell(monster, update)\n",
        "            await update.message.reply_text(player_action)\n",
        "            await asyncio.sleep(2)\n",
        "\n",
        "            if monster.hp <= 0:\n",
        "                await update.message.reply_text(f\"🎉 {monster.name} is defeated! 🎉\")\n",
        "                player.experience += 10\n",
        "                if player.experience >= 100:\n",
        "                    player.level_up()\n",
        "                    await update.message.reply_text(f\"{player.name} has leveled up to Level {player.level}! 🆙\")\n",
        "\n",
        "                if random.random() < 0.2:\n",
        "                    heal_amount = player.hp // 3\n",
        "                    player.hp += heal_amount\n",
        "                    await update.message.reply_text(f\"{player.name} found a healing potion and healed for {heal_amount} HP! 🧪\")\n",
        "\n",
        "                break\n",
        "\n",
        "            monster_action = monster.attack(player)\n",
        "            await update.message.reply_text(monster_action)\n",
        "            await asyncio.sleep(1)\n",
        "\n",
        "            if player.hp <= 0:\n",
        "                await update.message.reply_text(f\"{player.name} is defeated! ☠️\")\n",
        "                await update.message.reply_text(\n",
        "                    \"Welcome to the Dungeon! Type /newgame <class> to start a new adventure. \"\n",
        "                    \"(Example: /newgame Sorceress) Classes include Warrior, Priest, & Sorceress. \"\n",
        "                    \"Each has a unique passive ability. 🏰\"\n",
        "                )\n",
        "                return\n",
        "\n",
        "            await asyncio.sleep(1)\n",
        "            await update.message.reply_text(f\"{player.name}: ❤️ {player.hp} HP, {monster.name}: {monster.hp} HP\")\n",
        "\n",
        "        if player.hp > 0 and current_level < 4:\n",
        "            await self.dungeon_level(update, context, player, current_level + 1)\n",
        "\n",
        "    async def final_boss_battle(self, update: Update, context: CallbackContext, player: Player):\n",
        "        final_boss = FinalBoss()\n",
        "        await update.message.reply_text(\"\\n🔥 You have reached the Final Boss! Prepare for battle! 🔥\")\n",
        "        await self.battle(update, context, player, final_boss, current_level=4)\n",
        "        if player.hp > 0:\n",
        "            await update.message.reply_text(f\"🎉 Congratulations, {player.name}, you defeated the Final Boss! 🎉\")\n",
        "            await update.message.reply_text(\n",
        "                \"Welcome to the Dungeon! Type /newgame <class> to start a new adventure. \"\n",
        "                \"(Example: /newgame Sorceress) Classes include Warrior, Priest, & Sorceress. \"\n",
        "                \"Each has a unique passive ability. 🏰\"\n",
        "            )\n",
        "\n",
        "        self.scores[player.name] = player.experience\n",
        "        await self.show_scoreboard(update)\n",
        "\n",
        "    async def show_scoreboard(self, update: Update):\n",
        "        sorted_scores = sorted(self.scores.items(), key=lambda x: x[1], reverse=True)\n",
        "        leaderboard = \"🏆 Leaderboard:\\n\"\n",
        "        for idx, (name, score) in enumerate(sorted_scores, 1):\n",
        "            leaderboard += f\"{idx}. {name} - {score} XP ✨\\n\"\n",
        "\n",
        "        await update.message.reply_text(leaderboard)\n",
        "\n",
        "# Set up the Telegram Bot\n",
        "def main():\n",
        "    application = Application.builder().token(\"7998556607:AAGzsHO6x4OhkSs5g79zL4c3cSWOlSEy-H8\").build()\n",
        "\n",
        "    game = Game()\n",
        "    application.add_handler(CommandHandler(\"start\", game.start_game))\n",
        "    application.add_handler(CommandHandler(\"newgame\", game.new_game))\n",
        "    application.add_handler(CommandHandler(\"scoreboard\", game.show_scoreboard))\n",
        "\n",
        "    application.run_polling()\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    nest_asyncio.apply()\n",
        "    main()\n"
      ],
      "metadata": {
        "id": "rZsbaL8fCceN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9_Ripq4TCcgb"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
